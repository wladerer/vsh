import numpy as np
from matplotlib import pyplot as plt


def get_plot_stm_from_dat(file: str, gridsize: int = 300) -> plt:
    """Plots a STM from a .dat file generated by Critic2"""
    data = np.loadtxt(file)
    plt.hexbin(data[:, 2], data[:, 3], C=data[:, 4], gridsize=gridsize, cmap="Greys_r")

    return plt


def format_stm_plot(
    plt: plt, title: str = "Simulated STM", mode: str = "current"
) -> plt:
    """Formats the plot of a STM"""
    # Set font to serif
    plt.rcParams["font.family"] = "serif"
    # Set title
    plt.title(title)
    # Replace \AA with angstrom symbol
    plt.xlabel(r"x ($\mathrm{\AA}$)")
    plt.ylabel(r"y ($\mathrm{\AA}$)")

    if mode == "current":
        plt.colorbar(label=r"Tip Height ($\mathrm{\AA}$)")
    elif mode == "height":
        plt.colorbar(label="Current (a.u.)")

    return plt


def plot_stm_from_dat(
    file: str, title: str = "Simulated STM", mode: str = "current", gridsize: int = 300
) -> plt:
    """Plots a STM from a .dat file generated by Critic2"""
    plt = get_plot_stm_from_dat(file, gridsize)
    plt = format_stm_plot(plt, title, mode)

    return plt.show()


from pymatgen.io.vasp import Chgcar
from pymatgen.io.common import VolumetricData


def get_charge_density_from_chgcar(file: str) -> np.array:
    """Returns the data from a CHGCAR file"""
    chgcar = Chgcar.from_file(file)
    data = chgcar.data["total"]
    dims = chgcar.dim
    structure = chgcar.structure
    return data, dims, structure


def get_charge_density_from_cube(file: str) -> np.array:
    """Returns the data from a cube file"""
    cube = VolumetricData.from_cube(file)
    data = cube.data
    dims = cube.dim
    structure = cube.structure
    return data, dims, structure


def charge_density_from_file(file: str) -> np.array:
    """Returns the data from a CHGCAR or cube file"""
    try:
        return get_charge_density_from_chgcar(file)
    except:
        return get_charge_density_from_cube(file)


def plot_charge_density_slice(
    file: str,
    height: float,
    repeat_x: int = 1,
    repeat_y: int = 1,
    title: str = "Charge Density",
    output: str | None = None,
) -> None:
    """Plots a CHGCAR file with repeated images in the x and y directions"""
    data, _, structure = charge_density_from_file(file)
    # Check if slice is within the range, if not, throw an error
    if height < 0 or height > structure.lattice.c:
        raise ValueError(
            f"Height {height} is not within the range {structure.lattice.c}"
        )

    # Find the slice that is closest to the height
    slice = int(height / structure.lattice.c * data.shape[2])

    slice_data = data[:, :, slice]
    repeated_data = np.tile(slice_data, (repeat_y, repeat_x))

    # Find roughly the height of the slice in the z direction
    z = structure.lattice.c * slice / data.shape[2]

    plt.imshow(repeated_data, cmap="Greys_r")
    plt.title(f"{title} (Height: {z:.2f} Å)")
    plt.xlabel(r"x ($\mathrm{\AA}$)")
    plt.ylabel(r"y ($\mathrm{\AA}$)")

    if output:
        plt.savefig(output)
    else:
        plt.show()

    return None


def animate_slices(
    file: str,
    repeat_x: int = 1,
    repeat_y: int = 1,
    title: str = "Charge Density",
    output: str | None = None,
) -> None:
    import matplotlib.animation as animation

    """Animates slices of a CHGCAR file"""
    data, dims, structure = charge_density_from_file(file)
    total_length = structure.lattice.c
    repeated_data = np.tile(data, (repeat_y, repeat_x, 1))
    fig, ax = plt.subplots()
    im = ax.imshow(repeated_data[:, :, 0], cmap="Greys_r")
    plt.title(f"{title} (Height: 0.00 Å)")
    plt.xlabel(r"x ($\mathrm{\AA}$)")
    plt.ylabel(r"y ($\mathrm{\AA}$)")

    def animate(i):
        im.set_array(repeated_data[:, :, i])
        plt.title(f"{title} (Height: {total_length * i / data.shape[2]:.2f} Å)")
        return [im]

    ani = animation.FuncAnimation(fig, animate, frames=dims[2], blit=False)

    if output:
        ani.save(output, writer="imagemagick", fps=5)
    else:
        plt.show()

    return None
