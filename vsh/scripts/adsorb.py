from pymatgen.analysis.adsorption import AdsorbateSiteFinder
from pymatgen.core.structure import Molecule, Structure
from pymatgen.io.vasp.inputs import Poscar

def structure_from_file(filename: str) -> Structure:
    '''
    Creates a pymatgen structure from a file
    '''
    structure = Structure.from_file(filename, sort=True, primitive=False)

    return structure

def freeze_structure(structure: Structure, min_z: float, dof: list[bool] = [False, False, False]) -> Structure:
    '''
    Freezes the bottom layer of a structure
    '''
    # if not isinstance(min_z, float) or not isinstance(min_z, int) or min_z <= 0:
    #     raise TypeError("The min_z argument must be a positive, non-zero float or integer value.")
    if not isinstance(dof, list) or not all(isinstance(x, bool) for x in dof) or len(dof) != 3:
        raise TypeError("The dof argument must be a list of booleans with length 3.")

    for site in structure:
        if site.z < min_z:
            site.properties["selective_dynamics"] = dof
        else:
            site.properties["selective_dynamics"] = [True, True, True]

    return structure

def adsorbate_from_file(filename: str) -> Molecule:
    '''
    Creates a pymatgen molecule from a file
    '''
    adsorbate = Molecule.from_file(filename)

    return adsorbate

def get_chemical_formula(structure: Structure) -> str:
    '''
    Returns the chemical formula of a structure
    '''
    return structure.composition.reduced_formula

def add_adsorbate(structure: Structure, adsorbate: Molecule, min_z: float = 5.0, coverage: list[int] = [1, 1, 1], distance: float = 1.0) -> list[Structure]:
    '''
    Finds all adsorption sites on a structure and adsorbs the adsorbate at each site. Returns a list of adsorbed structures.
    '''

    asf = AdsorbateSiteFinder(structure)
    ads_structs = asf.generate_adsorption_structures(adsorbate, repeat=coverage, find_args={"distance": distance})  # edit later

    for ads_struct in ads_structs:
        
        freeze_structure(ads_struct, min_z=min_z)

    return ads_structs

def write_structure(structure, prefix: str = "", suffix: str = "") -> None:
    '''
    Writes a structure to a file
    '''
    #create Poscar object 
    formula = get_chemical_formula(structure)
    poscar = Poscar(structure, comment='Generated by vsh')
    poscar.write_file(f'{prefix}_{formula}_{suffix}')

def create_adsorbed_structure(args):

    #get adsorption sites
    structure = structure_from_file(args.input)
    adsorbate = adsorbate_from_file(args.adsorbate)
    ads_structs = add_adsorbate(structure, adsorbate, min_z=args.freeze, coverage=args.coverage, distance=args.distance)

    poscars = [ Poscar(ads_struct, sort_structure=True) for ads_struct in ads_structs ]

    return poscars

def run(args):

    #get structure
    structure = structure_from_file(args.input)

    #create adsorbed structures
    poscars = create_adsorbed_structure(args)

    if not args.output:
        for poscar in poscars:
            print(poscar.get_string())
    else:
        for i, poscar in enumerate(poscars):
            poscar.write_file(f'{args.output}_{i}.vasp')

    return None
