window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "vsh", "modulename": "vsh", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "vsh.cli", "modulename": "vsh.cli", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "vsh.cli.lazy_import", "modulename": "vsh.cli", "qualname": "lazy_import", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.cli.parse_app_args", "modulename": "vsh.cli", "qualname": "parse_app_args", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.cli.main", "modulename": "vsh.cli", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts", "modulename": "vsh.scripts", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "vsh.scripts.is_number", "modulename": "vsh.scripts", "qualname": "is_number", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.MeshAction", "modulename": "vsh.scripts", "qualname": "MeshAction", "kind": "class", "doc": "<p>Information about how to convert command line strings to Python objects.</p>\n\n<p>Action objects are used by an ArgumentParser to represent the information\nneeded to parse a single argument from one or more strings from the\ncommand line. The keyword arguments to the Action constructor are also\nall attributes of Action instances.</p>\n\n<p>Keyword Arguments:</p>\n\n<pre><code>- option_strings -- A list of command-line option strings which\n    should be associated with this action.\n\n- dest -- The name of the attribute to hold the created object(s)\n\n- nargs -- The number of command-line arguments that should be\n    consumed. By default, one argument will be consumed and a single\n    value will be produced.  Other values include:\n        - N (an integer) consumes N arguments (and produces a list)\n        - '?' consumes zero or one arguments\n        - '*' consumes zero or more arguments (and produces a list)\n        - '+' consumes one or more arguments (and produces a list)\n    Note that the difference between the default and nargs=1 is that\n    with the default, a single value will be produced, while with\n    nargs=1, a list containing a single value will be produced.\n\n- const -- The value to be produced if the option is specified and the\n    option uses an action that takes no values.\n\n- default -- The value to be produced if the option is not specified.\n\n- type -- A callable that accepts a single string argument, and\n    returns the converted value.  The standard Python types str, int,\n    float, and complex are useful examples of such callables.  If None,\n    str is used.\n\n- choices -- A container of values that should be allowed. If not None,\n    after a command-line argument has been converted to the appropriate\n    type, an exception will be raised if it is not a member of this\n    collection.\n\n- required -- True if the action must always be specified at the\n    command line. This is only meaningful for optional command-line\n    arguments.\n\n- help -- The help string describing the argument.\n\n- metavar -- The name to be used for the option's argument with the\n    help string. If None, the 'dest' value will be used as the name.\n</code></pre>\n", "bases": "argparse.Action"}, {"fullname": "vsh.scripts.setup", "modulename": "vsh.scripts", "qualname": "setup", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">subparsers</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.adsorb", "modulename": "vsh.scripts.adsorb", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "vsh.scripts.adsorb.structure_from_file", "modulename": "vsh.scripts.adsorb", "qualname": "structure_from_file", "kind": "function", "doc": "<p>Creates a pymatgen structure from a file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pymatgen</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">structure</span><span class=\"o\">.</span><span class=\"n\">Structure</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.adsorb.freeze_structure", "modulename": "vsh.scripts.adsorb", "qualname": "freeze_structure", "kind": "function", "doc": "<p>Freezes the bottom layer of a structure</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">structure</span><span class=\"p\">:</span> <span class=\"n\">pymatgen</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">structure</span><span class=\"o\">.</span><span class=\"n\">Structure</span>,</span><span class=\"param\">\t<span class=\"n\">min_z</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">dof</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pymatgen</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">structure</span><span class=\"o\">.</span><span class=\"n\">Structure</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.adsorb.adsorbate_from_file", "modulename": "vsh.scripts.adsorb", "qualname": "adsorbate_from_file", "kind": "function", "doc": "<p>Creates a pymatgen molecule from a file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pymatgen</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">structure</span><span class=\"o\">.</span><span class=\"n\">Molecule</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.adsorb.get_chemical_formula", "modulename": "vsh.scripts.adsorb", "qualname": "get_chemical_formula", "kind": "function", "doc": "<p>Returns the chemical formula of a structure</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">structure</span><span class=\"p\">:</span> <span class=\"n\">pymatgen</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">structure</span><span class=\"o\">.</span><span class=\"n\">Structure</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.adsorb.add_adsorbate", "modulename": "vsh.scripts.adsorb", "qualname": "add_adsorbate", "kind": "function", "doc": "<p>Finds all adsorption sites on a structure and adsorbs the adsorbate at each site. Returns a list of adsorbed structures.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">structure</span><span class=\"p\">:</span> <span class=\"n\">pymatgen</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">structure</span><span class=\"o\">.</span><span class=\"n\">Structure</span>,</span><span class=\"param\">\t<span class=\"n\">adsorbate</span><span class=\"p\">:</span> <span class=\"n\">pymatgen</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">structure</span><span class=\"o\">.</span><span class=\"n\">Molecule</span>,</span><span class=\"param\">\t<span class=\"n\">min_z</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">5.0</span>,</span><span class=\"param\">\t<span class=\"n\">coverage</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">distance</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">pymatgen</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">structure</span><span class=\"o\">.</span><span class=\"n\">Structure</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.adsorb.write_structure", "modulename": "vsh.scripts.adsorb", "qualname": "write_structure", "kind": "function", "doc": "<p>Writes a structure to a file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">structure</span>, </span><span class=\"param\"><span class=\"n\">prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">suffix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.adsorb.create_adsorbed_structure", "modulename": "vsh.scripts.adsorb", "qualname": "create_adsorbed_structure", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.adsorb.run", "modulename": "vsh.scripts.adsorb", "qualname": "run", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.alchemy", "modulename": "vsh.scripts.alchemy", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "vsh.scripts.alchemy.delete_atoms_by_index", "modulename": "vsh.scripts.alchemy", "qualname": "delete_atoms_by_index", "kind": "function", "doc": "<p>Deletes atoms from a structure</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">atoms</span><span class=\"p\">:</span> <span class=\"n\">ase</span><span class=\"o\">.</span><span class=\"n\">atoms</span><span class=\"o\">.</span><span class=\"n\">Atoms</span>, </span><span class=\"param\"><span class=\"n\">indices</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.alchemy.delete_atoms_by_type", "modulename": "vsh.scripts.alchemy", "qualname": "delete_atoms_by_type", "kind": "function", "doc": "<p>Deletes atoms from a structure</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">atoms</span><span class=\"p\">:</span> <span class=\"n\">ase</span><span class=\"o\">.</span><span class=\"n\">atoms</span><span class=\"o\">.</span><span class=\"n\">Atoms</span>, </span><span class=\"param\"><span class=\"n\">types</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.alchemy.calculate_vacuum", "modulename": "vsh.scripts.alchemy", "qualname": "calculate_vacuum", "kind": "function", "doc": "<p>Subtracts vacuum from a structure</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">atoms</span><span class=\"p\">:</span> <span class=\"n\">ase</span><span class=\"o\">.</span><span class=\"n\">atoms</span><span class=\"o\">.</span><span class=\"n\">Atoms</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.alchemy.freeze_atoms", "modulename": "vsh.scripts.alchemy", "qualname": "freeze_atoms", "kind": "function", "doc": "<p>Freezes atoms in a structure</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">atoms</span><span class=\"p\">:</span> <span class=\"n\">ase</span><span class=\"o\">.</span><span class=\"n\">atoms</span><span class=\"o\">.</span><span class=\"n\">Atoms</span>, </span><span class=\"param\"><span class=\"n\">indices</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.alchemy.freeze_atoms_by_type", "modulename": "vsh.scripts.alchemy", "qualname": "freeze_atoms_by_type", "kind": "function", "doc": "<p>Freezes atoms in a structure</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">atoms</span><span class=\"p\">:</span> <span class=\"n\">ase</span><span class=\"o\">.</span><span class=\"n\">atoms</span><span class=\"o\">.</span><span class=\"n\">Atoms</span>, </span><span class=\"param\"><span class=\"n\">types</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.alchemy.freeze_atoms_by_z", "modulename": "vsh.scripts.alchemy", "qualname": "freeze_atoms_by_z", "kind": "function", "doc": "<p>Freezes atoms in a structure</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">atoms</span><span class=\"p\">:</span> <span class=\"n\">ase</span><span class=\"o\">.</span><span class=\"n\">atoms</span><span class=\"o\">.</span><span class=\"n\">Atoms</span>, </span><span class=\"param\"><span class=\"n\">z</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">direction</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;above&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.alchemy.freeze_range", "modulename": "vsh.scripts.alchemy", "qualname": "freeze_range", "kind": "function", "doc": "<p>Freezes atoms in a structure</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">atoms</span><span class=\"p\">:</span> <span class=\"n\">ase</span><span class=\"o\">.</span><span class=\"n\">atoms</span><span class=\"o\">.</span><span class=\"n\">Atoms</span>, </span><span class=\"param\"><span class=\"n\">zmin</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">zmax</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.alchemy.delete_atoms", "modulename": "vsh.scripts.alchemy", "qualname": "delete_atoms", "kind": "function", "doc": "<p>Deletes atoms from a structure</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.alchemy.freeze", "modulename": "vsh.scripts.alchemy", "qualname": "freeze", "kind": "function", "doc": "<p>Freezes atoms in a structure</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.alchemy.swap_atoms", "modulename": "vsh.scripts.alchemy", "qualname": "swap_atoms", "kind": "function", "doc": "<p>Exchanges atoms of one type into another</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.alchemy.rattle_atoms", "modulename": "vsh.scripts.alchemy", "qualname": "rattle_atoms", "kind": "function", "doc": "<p>Rattles atoms using MonteCarloRattleTransformation</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.alchemy.run", "modulename": "vsh.scripts.alchemy", "qualname": "run", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.analysis", "modulename": "vsh.scripts.analysis", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "vsh.scripts.analysis.validate_atoms", "modulename": "vsh.scripts.analysis", "qualname": "validate_atoms", "kind": "function", "doc": "<p>Checks if an atoms object is valid</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">atoms</span><span class=\"p\">:</span> <span class=\"n\">ase</span><span class=\"o\">.</span><span class=\"n\">atoms</span><span class=\"o\">.</span><span class=\"n\">Atoms</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.analysis.is_diatomic", "modulename": "vsh.scripts.analysis", "qualname": "is_diatomic", "kind": "function", "doc": "<p>Checks if an atoms object is diatomic</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">atoms</span><span class=\"p\">:</span> <span class=\"n\">ase</span><span class=\"o\">.</span><span class=\"n\">atoms</span><span class=\"o\">.</span><span class=\"n\">Atoms</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.analysis.get_adjacency_matrix", "modulename": "vsh.scripts.analysis", "qualname": "get_adjacency_matrix", "kind": "function", "doc": "<p>Gets the adjacency matrix of a structure</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">atoms</span><span class=\"p\">:</span> <span class=\"n\">ase</span><span class=\"o\">.</span><span class=\"n\">atoms</span><span class=\"o\">.</span><span class=\"n\">Atoms</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.analysis.get_number_of_atoms", "modulename": "vsh.scripts.analysis", "qualname": "get_number_of_atoms", "kind": "function", "doc": "<p>Gets the number of atoms in an atoms object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">atoms</span><span class=\"p\">:</span> <span class=\"n\">ase</span><span class=\"o\">.</span><span class=\"n\">atoms</span><span class=\"o\">.</span><span class=\"n\">Atoms</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.analysis.analyze_adjacency_matrix", "modulename": "vsh.scripts.analysis", "qualname": "analyze_adjacency_matrix", "kind": "function", "doc": "<p>Checks if the adjacency matrix is reasonable</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">adjacency_matrix</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">min_dist</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.analysis.unpack_indices", "modulename": "vsh.scripts.analysis", "qualname": "unpack_indices", "kind": "function", "doc": "<p>Returns a dictionary of atom pairs</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">indices</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">element_list</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">bond_lengths</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.analysis.conflicting_atoms", "modulename": "vsh.scripts.analysis", "qualname": "conflicting_atoms", "kind": "function", "doc": "<p>Checks if a structure has atoms that are too close together</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">atoms</span><span class=\"p\">:</span> <span class=\"n\">ase</span><span class=\"o\">.</span><span class=\"n\">atoms</span><span class=\"o\">.</span><span class=\"n\">Atoms</span>, </span><span class=\"param\"><span class=\"n\">min_dist</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.analysis.print_conflicts", "modulename": "vsh.scripts.analysis", "qualname": "print_conflicts", "kind": "function", "doc": "<p>Prints the conflicting atoms</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">conflicts</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.analysis.check_convergence", "modulename": "vsh.scripts.analysis", "qualname": "check_convergence", "kind": "function", "doc": "<p>Looks for vasprun.xml file and checks if converged</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;./vasprun.xml&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.analysis.inspect_oszicar", "modulename": "vsh.scripts.analysis", "qualname": "inspect_oszicar", "kind": "function", "doc": "<p>Reads an OSZICAR file and returns a dictionary of convergence information</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;./OSZICAR&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.analysis.get_conflicts", "modulename": "vsh.scripts.analysis", "qualname": "get_conflicts", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.analysis.get_volume", "modulename": "vsh.scripts.analysis", "qualname": "get_volume", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.analysis.get_cell", "modulename": "vsh.scripts.analysis", "qualname": "get_cell", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.analysis.get_params", "modulename": "vsh.scripts.analysis", "qualname": "get_params", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.analysis.get_symmetry", "modulename": "vsh.scripts.analysis", "qualname": "get_symmetry", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.analysis.get_vacuum", "modulename": "vsh.scripts.analysis", "qualname": "get_vacuum", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.analysis.get_energy", "modulename": "vsh.scripts.analysis", "qualname": "get_energy", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.analysis.get_converged", "modulename": "vsh.scripts.analysis", "qualname": "get_converged", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.analysis.get_equivalent_positions", "modulename": "vsh.scripts.analysis", "qualname": "get_equivalent_positions", "kind": "function", "doc": "<p>Get the equivalent positions of a structure</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pmg_structure</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.analysis.run", "modulename": "vsh.scripts.analysis", "qualname": "run", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.band", "modulename": "vsh.scripts.band", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "vsh.scripts.band.orbital_dict", "modulename": "vsh.scripts.band", "qualname": "orbital_dict", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;s&#x27;: 0, &#x27;p_y&#x27;: 1, &#x27;p_z&#x27;: 2, &#x27;p_x&#x27;: 3, &#x27;d_xy&#x27;: 4, &#x27;d_yz&#x27;: 5, &#x27;d_z2&#x27;: 6, &#x27;d_xz&#x27;: 7, &#x27;d_x2-y2&#x27;: 8, &#x27;f_y(3x2 -y2)&#x27;: 9, &#x27;f_xyz&#x27;: 10, &#x27;f_yz2&#x27;: 11, &#x27;f_z3&#x27;: 12, &#x27;f_xz2&#x27;: 13, &#x27;f_z(x2 -y2)&#x27;: 14, &#x27;f_x(x2 -3y2)&#x27;: 15}"}, {"fullname": "vsh.scripts.band.handle_orbitals", "modulename": "vsh.scripts.band", "qualname": "handle_orbitals", "kind": "function", "doc": "<p>Converts a string to a list of orbitals</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">orbitals</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.band.handle_atoms", "modulename": "vsh.scripts.band", "qualname": "handle_atoms", "kind": "function", "doc": "<p>Gets identities and indices of atoms from a POSCAR or CONTCAR file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">poscar</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;./POSCAR&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.band.run", "modulename": "vsh.scripts.band", "qualname": "run", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.chgcar", "modulename": "vsh.scripts.chgcar", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "vsh.scripts.chgcar.write_output", "modulename": "vsh.scripts.chgcar", "qualname": "write_output", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">chgcar</span>, </span><span class=\"param\"><span class=\"n\">output</span>, </span><span class=\"param\"><span class=\"n\">cube</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.chgcar.plot_linear_slice", "modulename": "vsh.scripts.chgcar", "qualname": "plot_linear_slice", "kind": "function", "doc": "<p>Plots a linear slice of the CHGCAR file.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">point1</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">point2</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">npoints</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.chgcar.run", "modulename": "vsh.scripts.chgcar", "qualname": "run", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.cohp", "modulename": "vsh.scripts.cohp", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "vsh.scripts.cohp.cohp_from_file", "modulename": "vsh.scripts.cohp", "qualname": "cohp_from_file", "kind": "function", "doc": "<p>Returns a CompleteCohp object from a COHP or COBI file. Default format is LOBSTER</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.cohp.cohp_from_dir", "modulename": "vsh.scripts.cohp", "qualname": "cohp_from_dir", "kind": "function", "doc": "<p>Returns a CompleteCohp object from a directory containing a COHP or COBI file. Default format is LOBSTER</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">directory</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.cohp.ichop_list_to_dataframe", "modulename": "vsh.scripts.cohp", "qualname": "ichop_list_to_dataframe", "kind": "function", "doc": "<p>Returns a pandas dataframe of the species in the ICOHPLIST.lobster file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.cohp.check_cohp_path", "modulename": "vsh.scripts.cohp", "qualname": "check_cohp_path", "kind": "function", "doc": "<p>Checks if the input path is a file or directory and returns the path to the ICOHPLIST.lobster file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">input_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.cohp.show_cohp_species", "modulename": "vsh.scripts.cohp", "qualname": "show_cohp_species", "kind": "function", "doc": "<p>Prints a list of the species in the ICOHPLIST.lobster file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">input_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.cohp.icohp_to_pickle", "modulename": "vsh.scripts.cohp", "qualname": "icohp_to_pickle", "kind": "function", "doc": "<p>Saves ICOHP data to a pickle file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.cohp.collate_cohps", "modulename": "vsh.scripts.cohp", "qualname": "collate_cohps", "kind": "function", "doc": "<p>Collates a list of COHP or COBI files. Default format is LOBSTER</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.cohp.plot_cohps", "modulename": "vsh.scripts.cohp", "qualname": "plot_cohps", "kind": "function", "doc": "<p>Plots a list of COHP or COBI files. Default format is LOBSTER</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.cohp.get_icohp_graph", "modulename": "vsh.scripts.cohp", "qualname": "get_icohp_graph", "kind": "function", "doc": "<p>Plots a graph of the COHP or COBI files</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">networkx</span><span class=\"o\">.</span><span class=\"n\">classes</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">Graph</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.cohp.plot_icohp_graph", "modulename": "vsh.scripts.cohp", "qualname": "plot_icohp_graph", "kind": "function", "doc": "<p>Plots a graph of the COHP or COBI file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.cohp.run", "modulename": "vsh.scripts.cohp", "qualname": "run", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.db", "modulename": "vsh.scripts.db", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "vsh.scripts.db.check_for_vasprun", "modulename": "vsh.scripts.db", "qualname": "check_for_vasprun", "kind": "function", "doc": "<p>Checks if a vasprun.xml file exists</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.db.handle_kpoints", "modulename": "vsh.scripts.db", "qualname": "handle_kpoints", "kind": "function", "doc": "<p>Handles kpoints returned by pymatgen</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">kpoints</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.db.get_metadata", "modulename": "vsh.scripts.db", "qualname": "get_metadata", "kind": "function", "doc": "<p>Returns metadata from vasprun.xml file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.db.update_ase_db", "modulename": "vsh.scripts.db", "qualname": "update_ase_db", "kind": "function", "doc": "<p>Writes atoms and metadata to a database</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">vasprun_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.db.setup_args", "modulename": "vsh.scripts.db", "qualname": "setup_args", "kind": "function", "doc": "<p>Parse command line arguments</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">subparsers</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.db.run", "modulename": "vsh.scripts.db", "qualname": "run", "kind": "function", "doc": "<p>Run the db command</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.incar", "modulename": "vsh.scripts.incar", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "vsh.scripts.incar.get_atoms", "modulename": "vsh.scripts.incar", "qualname": "get_atoms", "kind": "function", "doc": "<p>Creates ASE atoms object from a file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.incar.write_incar", "modulename": "vsh.scripts.incar", "qualname": "write_incar", "kind": "function", "doc": "<p>Loads a dictionary from the incar.json file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.incar.update_incar_tag", "modulename": "vsh.scripts.incar", "qualname": "update_incar_tag", "kind": "function", "doc": "<p>Updates tags in an INCAR file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.incar.get_help", "modulename": "vsh.scripts.incar", "qualname": "get_help", "kind": "function", "doc": "<p>Retrieve info on VASP tags using VaspDoc</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.incar.run", "modulename": "vsh.scripts.incar", "qualname": "run", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.kpoints", "modulename": "vsh.scripts.kpoints", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "vsh.scripts.kpoints.two_d_kpath_template", "modulename": "vsh.scripts.kpoints", "qualname": "two_d_kpath_template", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Two dimensional Kpath \\n   {{ kpath }}\\nLine-Mode\\nReciprocal\\n   0.5000000000   0.0000000000   0.0000000000     M\\n   0.3333333333   0.3333333333   0.0000000000     K\\n\\n   0.3333333333   0.3333333333   0.0000000000     K\\n   0.0000000000   0.0000000000   0.0000000000     GAMMA\\n\\n   0.0000000000   0.0000000000   0.0000000000     GAMMA\\n   0.5000000000   0.0000000000   0.0000000000     M\\n\\n&#x27;"}, {"fullname": "vsh.scripts.kpoints.get_atoms", "modulename": "vsh.scripts.kpoints", "qualname": "get_atoms", "kind": "function", "doc": "<p>Creates ASE atoms object from a file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.kpoints.write_kpoints", "modulename": "vsh.scripts.kpoints", "qualname": "write_kpoints", "kind": "function", "doc": "<p>Writes a KPOINTS file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.kpoints.write_path", "modulename": "vsh.scripts.kpoints", "qualname": "write_path", "kind": "function", "doc": "<p>Makes a linemode Kpoints object from a structure</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.kpoints.hydbrid_mesh", "modulename": "vsh.scripts.kpoints", "qualname": "hydbrid_mesh", "kind": "function", "doc": "<p>Updates KPOINT file for hybrid calculations</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">step</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>, </span><span class=\"param\"><span class=\"n\">weight</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.kpoints.hybrid_mesh_to_string", "modulename": "vsh.scripts.kpoints", "qualname": "hybrid_mesh_to_string", "kind": "function", "doc": "<p>Converts a hybrid mesh to a string for a KPOINTS file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">grid</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>, </span><span class=\"param\"><span class=\"n\">step</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>, </span><span class=\"param\"><span class=\"n\">weight</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.kpoints.append_hybrid_mesh", "modulename": "vsh.scripts.kpoints", "qualname": "append_hybrid_mesh", "kind": "function", "doc": "<p>Adds a uniform mesh to a KPOINTS file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.kpoints.write_plane", "modulename": "vsh.scripts.kpoints", "qualname": "write_plane", "kind": "function", "doc": "<p>Creates a 2D kpath from a jinja 2 template</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.kpoints.run", "modulename": "vsh.scripts.kpoints", "qualname": "run", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.manage", "modulename": "vsh.scripts.manage", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "vsh.scripts.manage.validate_input", "modulename": "vsh.scripts.manage", "qualname": "validate_input", "kind": "function", "doc": "<p>Validates that INCAR, POSCAR, KPOINTS, and POTCAR files are present and formatted correctly</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.manage.snapshot", "modulename": "vsh.scripts.manage", "qualname": "snapshot", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.manage.parse_general_vasprun", "modulename": "vsh.scripts.manage", "qualname": "parse_general_vasprun", "kind": "function", "doc": "<p>Parses the general vasprun.xml file for structure, kpoint info, and energy</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.manage.note_to_string", "modulename": "vsh.scripts.manage", "qualname": "note_to_string", "kind": "function", "doc": "<p>Converts a note file to a string</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.manage.unique_serial_number", "modulename": "vsh.scripts.manage", "qualname": "unique_serial_number", "kind": "function", "doc": "<p>Generates a unique serial number for each simulation</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.manage.write_data_pickle", "modulename": "vsh.scripts.manage", "qualname": "write_data_pickle", "kind": "function", "doc": "<p>Stores a snapshot of the simulation in a pickle file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.manage.unpack_pickle", "modulename": "vsh.scripts.manage", "qualname": "unpack_pickle", "kind": "function", "doc": "<p>Unpacks POSCAR, INCAR, CONTCAR, and KPOINTS from a pickle file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.manage.run", "modulename": "vsh.scripts.manage", "qualname": "run", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.poscar", "modulename": "vsh.scripts.poscar", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "vsh.scripts.poscar.get_atoms", "modulename": "vsh.scripts.poscar", "qualname": "get_atoms", "kind": "function", "doc": "<p>Creates ASE atoms object from a file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.poscar.sort_poscar", "modulename": "vsh.scripts.poscar", "qualname": "sort_poscar", "kind": "function", "doc": "<p>Sorts a POSCAR file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.poscar.structure_from_mpi_code", "modulename": "vsh.scripts.poscar", "qualname": "structure_from_mpi_code", "kind": "function", "doc": "<p>Creates a pymatgen structure from a code</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mpcode</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">is_conventional</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.poscar.mp_poscar", "modulename": "vsh.scripts.poscar", "qualname": "mp_poscar", "kind": "function", "doc": "<p>Creates a POSCAR file from a Materials Project code</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.poscar.boxed_molecule", "modulename": "vsh.scripts.poscar", "qualname": "boxed_molecule", "kind": "function", "doc": "<p>Creates a boxed molecule from an input file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.poscar.convert_to_poscar", "modulename": "vsh.scripts.poscar", "qualname": "convert_to_poscar", "kind": "function", "doc": "<p>Converts a file to a POSCAR file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.poscar.make_supercell", "modulename": "vsh.scripts.poscar", "qualname": "make_supercell", "kind": "function", "doc": "<p>Make a supercell of a structure</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.poscar.list_selective_dynamics", "modulename": "vsh.scripts.poscar", "qualname": "list_selective_dynamics", "kind": "function", "doc": "<p>Lists atoms and their selective dynamics</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.poscar.list_poscar", "modulename": "vsh.scripts.poscar", "qualname": "list_poscar", "kind": "function", "doc": "<p>Lists the atoms by height file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.poscar.calculate_rdf", "modulename": "vsh.scripts.poscar", "qualname": "calculate_rdf", "kind": "function", "doc": "<p>Calculate the radial distribution function (RDF) from a set of XYZ coordinates.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>coordinates: numpy array of shape (n_particles, 3) representing XYZ coordinates.</li>\n<li>bins: number of bins for histogram.</li>\n<li>r_max: maximum distance to consider.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>bin_centers: centers of the bins.</li>\n<li>rdf: radial distribution function.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">coordinates</span>, </span><span class=\"param\"><span class=\"n\">bins</span><span class=\"o\">=</span><span class=\"mi\">1000</span>, </span><span class=\"param\"><span class=\"n\">r_max</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.poscar.plot_radial_distribution_function", "modulename": "vsh.scripts.poscar", "qualname": "plot_radial_distribution_function", "kind": "function", "doc": "<p>Plots the radial distribution function of a structure</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.poscar.compare_rdf", "modulename": "vsh.scripts.poscar", "qualname": "compare_rdf", "kind": "function", "doc": "<p>Compares the radial distribution function of two structures</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.poscar.run", "modulename": "vsh.scripts.poscar", "qualname": "run", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.potcar", "modulename": "vsh.scripts.potcar", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "vsh.scripts.potcar.get_atoms", "modulename": "vsh.scripts.potcar", "qualname": "get_atoms", "kind": "function", "doc": "<p>Creates ASE atoms object from a file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.potcar.potcar_from_structure", "modulename": "vsh.scripts.potcar", "qualname": "potcar_from_structure", "kind": "function", "doc": "<p>Creates a POTCAR object from a structure file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">functional</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pymatgen</span><span class=\"o\">.</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">vasp</span><span class=\"o\">.</span><span class=\"n\">inputs</span><span class=\"o\">.</span><span class=\"n\">Potcar</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.potcar.potcar_from_symbols", "modulename": "vsh.scripts.potcar", "qualname": "potcar_from_symbols", "kind": "function", "doc": "<p>Creates a POTCAR object from a list of symbols</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">symbols</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">functional</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pymatgen</span><span class=\"o\">.</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">vasp</span><span class=\"o\">.</span><span class=\"n\">inputs</span><span class=\"o\">.</span><span class=\"n\">Potcar</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.potcar.write_potcar", "modulename": "vsh.scripts.potcar", "qualname": "write_potcar", "kind": "function", "doc": "<p>Writes a POTCAR file</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">potcar</span><span class=\"p\">:</span> <span class=\"n\">pymatgen</span><span class=\"o\">.</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">vasp</span><span class=\"o\">.</span><span class=\"n\">inputs</span><span class=\"o\">.</span><span class=\"n\">Potcar</span>,</span><span class=\"param\">\t<span class=\"n\">output</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pymatgen</span><span class=\"o\">.</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">vasp</span><span class=\"o\">.</span><span class=\"n\">inputs</span><span class=\"o\">.</span><span class=\"n\">Potcar</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.potcar.run", "modulename": "vsh.scripts.potcar", "qualname": "run", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.procar", "modulename": "vsh.scripts.procar", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "vsh.scripts.procar.orbital_dict", "modulename": "vsh.scripts.procar", "qualname": "orbital_dict", "kind": "variable", "doc": "<p></p>\n", "default_value": "{0: &#x27;s&#x27;, 1: &#x27;p_y&#x27;, 2: &#x27;p_z&#x27;, 3: &#x27;p_x&#x27;, 4: &#x27;d_xy&#x27;, 5: &#x27;d_yz&#x27;, 6: &#x27;d_z2&#x27;, 7: &#x27;d_xz&#x27;, 8: &#x27;d_x2-y2&#x27;, 9: &#x27;f_y(3x2 -y2)&#x27;, 10: &#x27;f_xyz&#x27;, 11: &#x27;f_yz2&#x27;, 12: &#x27;f_z3&#x27;, 13: &#x27;f_xz2&#x27;, 14: &#x27;f_z(x2 -y2)&#x27;, 15: &#x27;f_x(x2 -3y2)&#x27;, &#x27;Psum&#x27;: &#x27;p_x + p_y&#x27;, &#x27;Dsum&#x27;: &#x27;d_xz + d_yz&#x27;}"}, {"fullname": "vsh.scripts.procar.read_procar_with_pyprocar", "modulename": "vsh.scripts.procar", "qualname": "read_procar_with_pyprocar", "kind": "function", "doc": "<p>Reads PROCAR and possibly OUTCAR if fermi level is not given. Uses PyProcar Implementation</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">procar_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">efermi</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">outcar_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.procar.dict_to_dataframe", "modulename": "vsh.scripts.procar", "qualname": "dict_to_dataframe", "kind": "function", "doc": "<p>Creates a pandas dataframe from the projected eigenvalues dict</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">projected_eigenvalues</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.procar.eigenvalues_from_vasprun", "modulename": "vsh.scripts.procar", "qualname": "eigenvalues_from_vasprun", "kind": "function", "doc": "<p>Gets eigenvalues and fermi energy from vasprun.xml file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.procar.projected_eigenvals_from_vasprun", "modulename": "vsh.scripts.procar", "qualname": "projected_eigenvals_from_vasprun", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.procar.merge_eigenvalues", "modulename": "vsh.scripts.procar", "qualname": "merge_eigenvalues", "kind": "function", "doc": "<p>Merges eigenvalues and projected eigenvalues</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">eigenvalues</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">projected_eigenvalues</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.procar.projected_eigenvalues_from_pickle", "modulename": "vsh.scripts.procar", "qualname": "projected_eigenvalues_from_pickle", "kind": "function", "doc": "<p>Loads eigenvalues from pickle file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.procar.save_eigenvals", "modulename": "vsh.scripts.procar", "qualname": "save_eigenvals", "kind": "function", "doc": "<p>Pickles eigenvalue object</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">projected_eigenvalues</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.procar.parse_query_input", "modulename": "vsh.scripts.procar", "qualname": "parse_query_input", "kind": "function", "doc": "<p>Formats query to be compatible with Pandas</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.procar.query_data", "modulename": "vsh.scripts.procar", "qualname": "query_data", "kind": "function", "doc": "<p>Allows querying the data from the command line</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>, </span><span class=\"param\"><span class=\"n\">query_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.procar.load_dataframe_from_file", "modulename": "vsh.scripts.procar", "qualname": "load_dataframe_from_file", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.procar.add_kpoint_labels", "modulename": "vsh.scripts.procar", "qualname": "add_kpoint_labels", "kind": "function", "doc": "<p>Adds kpoint labels to the plot</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fig</span>, </span><span class=\"param\"><span class=\"n\">dataframe</span>, </span><span class=\"param\"><span class=\"n\">labels</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.procar.filter_bands_by_energy", "modulename": "vsh.scripts.procar", "qualname": "filter_bands_by_energy", "kind": "function", "doc": "<p>Filter bands by energy</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataframe</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>, </span><span class=\"param\"><span class=\"n\">emin</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">emax</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.procar.filter_bands_by_index", "modulename": "vsh.scripts.procar", "qualname": "filter_bands_by_index", "kind": "function", "doc": "<p>Filter bands by index</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dataframe</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">index_min</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">index_max</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.procar.get_kpoint_data", "modulename": "vsh.scripts.procar", "qualname": "get_kpoint_data", "kind": "function", "doc": "<p>Summarizes the data for a specific kpoint</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">kpoint</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">band</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.procar.add_orbital_sum", "modulename": "vsh.scripts.procar", "qualname": "add_orbital_sum", "kind": "function", "doc": "<p>Adds a new entry that is the sum of the Percent of entries with the same Kpoint, Band, and Spin, but only if Orbital is 1 or 3</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dataframe</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">orbitals</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">label</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.procar.get_kpoint_orbital_variation", "modulename": "vsh.scripts.procar", "qualname": "get_kpoint_orbital_variation", "kind": "function", "doc": "<p>Plots the orbital variation within a band</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">band</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">ions</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.procar.calculate_absolute_charge_spilling", "modulename": "vsh.scripts.procar", "qualname": "calculate_absolute_charge_spilling", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataframe</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.procar.plot_kpoint_orbital_variation", "modulename": "vsh.scripts.procar", "qualname": "plot_kpoint_orbital_variation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.procar.parse_structure_file", "modulename": "vsh.scripts.procar", "qualname": "parse_structure_file", "kind": "function", "doc": "<p>Reads a structure file and returns an atom dataframe</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.procar.get_compositional_variation", "modulename": "vsh.scripts.procar", "qualname": "get_compositional_variation", "kind": "function", "doc": "<p>Get compositional variation of a band</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">band</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.procar.plot_compositional_variation", "modulename": "vsh.scripts.procar", "qualname": "plot_compositional_variation", "kind": "function", "doc": "<p>Plots the compositional variation of a band</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.procar.analyze_kpoint", "modulename": "vsh.scripts.procar", "qualname": "analyze_kpoint", "kind": "function", "doc": "<p>Summarizes the data for a specific kpoint</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.procar.plot_bands", "modulename": "vsh.scripts.procar", "qualname": "plot_bands", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.procar.run_query", "modulename": "vsh.scripts.procar", "qualname": "run_query", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.procar.describe_procar", "modulename": "vsh.scripts.procar", "qualname": "describe_procar", "kind": "function", "doc": "<p>Briefly describes the PROCAR file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.procar.pickle_procar", "modulename": "vsh.scripts.procar", "qualname": "pickle_procar", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.procar.run", "modulename": "vsh.scripts.procar", "qualname": "run", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.slab", "modulename": "vsh.scripts.slab", "kind": "module", "doc": "<p>Orthogonalization utilities were written by Dr. Yonghyuk Lee</p>\n"}, {"fullname": "vsh.scripts.slab.structure_from_file", "modulename": "vsh.scripts.slab", "qualname": "structure_from_file", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pymatgen</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">structure</span><span class=\"o\">.</span><span class=\"n\">Structure</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.slab.slab_from_structure", "modulename": "vsh.scripts.slab", "qualname": "slab_from_structure", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">structure</span><span class=\"p\">:</span> <span class=\"n\">pymatgen</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">structure</span><span class=\"o\">.</span><span class=\"n\">Structure</span>,</span><span class=\"param\">\t<span class=\"n\">miller_plane</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">zmin</span>,</span><span class=\"param\">\t<span class=\"n\">vacuum</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">is_primitive</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">center_slab</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">in_unit_planes</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">reorient_lattice</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">pymatgen</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">structure</span><span class=\"o\">.</span><span class=\"n\">Structure</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.slab.slab_to_poscar", "modulename": "vsh.scripts.slab", "qualname": "slab_to_poscar", "kind": "function", "doc": "<p>Generates a pymatgen Poscar object from a slab</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">slab</span><span class=\"p\">:</span> <span class=\"n\">pymatgen</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">structure</span><span class=\"o\">.</span><span class=\"n\">Structure</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.slab.generate_filename", "modulename": "vsh.scripts.slab", "qualname": "generate_filename", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">structure</span><span class=\"p\">:</span> <span class=\"n\">pymatgen</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">structure</span><span class=\"o\">.</span><span class=\"n\">Structure</span>,</span><span class=\"param\">\t<span class=\"n\">miller_plane</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">zmin</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.slab.freeze_slab", "modulename": "vsh.scripts.slab", "qualname": "freeze_slab", "kind": "function", "doc": "<p>Freezes atoms below a certain threshold</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">structure</span><span class=\"p\">:</span> <span class=\"n\">pymatgen</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">structure</span><span class=\"o\">.</span><span class=\"n\">Structure</span>,</span><span class=\"param\">\t<span class=\"n\">min_z</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pymatgen</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">structure</span><span class=\"o\">.</span><span class=\"n\">Structure</span>:</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.slab.update_structure", "modulename": "vsh.scripts.slab", "qualname": "update_structure", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">traj</span>, </span><span class=\"param\"><span class=\"n\">soap_info</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;rcut&#39;</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">&#39;nmax&#39;</span><span class=\"p\">:</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"s1\">&#39;lmax&#39;</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">}</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.slab.quick_score", "modulename": "vsh.scripts.slab", "qualname": "quick_score", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">test_structure</span>, </span><span class=\"param\"><span class=\"n\">training_structure</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.slab.orthogonalize_slab", "modulename": "vsh.scripts.slab", "qualname": "orthogonalize_slab", "kind": "function", "doc": "<p>Orthogonalizes a structure</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">beta</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">gamma</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.slab.gen_slabs", "modulename": "vsh.scripts.slab", "qualname": "gen_slabs", "kind": "function", "doc": "<p>Generate slabs using pymatgen slab generator</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.slab.orthogonalize", "modulename": "vsh.scripts.slab", "qualname": "orthogonalize", "kind": "function", "doc": "<p>Orthogonalize a slab</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.slab.run", "modulename": "vsh.scripts.slab", "qualname": "run", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.wavecar", "modulename": "vsh.scripts.wavecar", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "vsh.scripts.wavecar.generate_parchg", "modulename": "vsh.scripts.wavecar", "qualname": "generate_parchg", "kind": "function", "doc": "<p>Generates a PARCHG file from a WAVECAR file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.wavecar.generate_fft_mesh", "modulename": "vsh.scripts.wavecar", "qualname": "generate_fft_mesh", "kind": "function", "doc": "<p>Generates a COEFFS file from a WAVECAR file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.wavecar.generate_unk", "modulename": "vsh.scripts.wavecar", "qualname": "generate_unk", "kind": "function", "doc": "<p>This is a modified version of the generate_unk method from the pymatgen</p>\n\n<p>Write the UNK files to the given directory.</p>\n\n<p>Writes the cell-periodic part of the bloch wavefunctions from the\nWAVECAR file to each of the UNK files. There will be one UNK file for\neach of the kpoints in the WAVECAR file.</p>\n\n<p>Note:\n    wannier90 expects the full kpoint grid instead of the symmetry-\n    reduced one that VASP stores the wavefunctions on. You should run\n    a nscf calculation with ISYM=0 to obtain the correct grid.</p>\n\n<p>Args:\n    directory (str): directory where the UNK files are written</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "vsh.scripts.wavecar.run", "modulename": "vsh.scripts.wavecar", "qualname": "run", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();